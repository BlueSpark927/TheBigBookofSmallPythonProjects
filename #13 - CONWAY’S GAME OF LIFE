import copy, random, sys, time
	
#	Set up the constants:
WIDTH = 79   # The width of the cell grid.
HEIGHT = 20  # The height of the cell grid.
	
#	(!) Try changing ALIVE to '#' or another character:
ALIVE = 'O'  # The character representing a living cell.
#	(!) Try changing DEAD to '.' or another character:
DEAD = ' '   # The character representing a dead cell.
	
#	(!) Try changing ALIVE to '|' and DEAD to '-'.
	
#	The cells and nextCells are dictionaries for the state of the game.
#	Their keys are (x, y) tuples and their values are one of the ALIVE
#	or DEAD values.
n	extCells = {}
#	Put random dead and alive cells into nextCells:
for x in range(WIDTH):  # Loop over every possible column.
	for y in range(HEIGHT):  # Loop over every possible row.
	# 50/50 chance for starting cells being alive or dead.
	if random.randint(0, 1) == 0:
	nextCells[(x, y)] = ALIVE  # Add a living cell.
	else:
	nextCells[(x, y)] = DEAD  # Add a dead cell.
	
while True:  # Main program loop.
	# Each iteration of this loop is a step of the simulation.
	
	print('\n' * 50)  # Separate each step with newlines.
	cells = copy.deepcopy(nextCells)
	
	# Print cells on the screen:
	for y in range(HEIGHT):
	for x in range(WIDTH):
	print(cells[(x, y)], end='')  # Print the # or space.
	print()  # Print a newline at the end of the row.
	print('Press Ctrl-C to quit.')
	
	# Calculate the next step's cells based on current step's cells:
	for x in range(WIDTH):
	for y in range(HEIGHT):
	# Get the neighboring coordinates of (x, y), even if they
	# wrap around the edge:
	left  = (x - 1) % WIDTH
	right = (x + 1) % WIDTH
	above = (y - 1) % HEIGHT
	below = (y + 1) % HEIGHT
	
	# Count the number of living neighbors:
	numNeighbors = 0
import copy, random, sys, time

# Set up the constants:
WIDTH = 79   # The width of the cell grid.
HEIGHT = 20  # The height of the cell grid.

# (!) Try changing ALIVE to '#' or another ch
ALIVE = 'O'  # The character representing a l
# (!) Try changing DEAD to '.' or another cha
DEAD = ' '   # The character representing a d

# (!) Try changing ALIVE to '|' and DEAD to '

# The cells and nextCells are dictionaries fo
# Their keys are (x, y) tuples and their valu
# or DEAD values.
nextCells = {}
# Put random dead and alive cells into nextCe
for x in range(WIDTH):  # Loop over every pos
for y in range(HEIGHT):  # Loop over ever
# 50/50 chance for starting cells bei
if random.randint(0, 1) == 0:
nextCells[(x, y)] = ALIVE  # Add
else:
nextCells[(x, y)] = DEAD  # Add a

while True:  # Main program loop.
# Each iteration of this loop is a step o

print('\n' * 50)  # Separate each step wi
cells = copy.deepcopy(nextCells)

# Print cells on the screen:
for y in range(HEIGHT):
for x in range(WIDTH):
print(cells[(x, y)], end='')  # P
print()  # Print a newline at the end
print('Press Ctrl-C to quit.')

# Calculate the next step's cells based o
for x in range(WIDTH):
for y in range(HEIGHT):
# Get the neighboring coordinates
# wrap around the edge:
left  = (x - 1) % WIDTH
right = (x + 1) % WIDTH
above = (y - 1) % HEIGHT
below = (y + 1) % HEIGHT

# Count the number of living neig
numNeighbors = 0
if cells[(left, above)] == ALIVE:
numNeighbors += 1  # Top-left
if cells[(x, above)] == ALIVE:
numNeighbors += 1  # Top neig
if cells[(right, above)] == ALIVE
numNeighbors += 1  # Top-righ
if cells[(left, y)] == ALIVE:
numNeighbors += 1  # Left nei
if cells[(right, y)] == ALIVE:
numNeighbors += 1  # Right ne
if cells[(left, below)] == ALIVE:
numNeighbors += 1  # Bottom-l
if cells[(x, below)] == ALIVE:
numNeighbors += 1  # Bottom n
if cells[(right, below)] == ALIVE
numNeighbors += 1  # Bottom-r

# Set cell based on Conway's Game
if cells[(x, y)] == ALIVE and (nu
or numNeighbors == 3):
# Living cells with 2 or
nextCells[(x, y)] = ALIVE
elif cells[(x, y)] == DEAD and nu
# Dead cells with 3 neighbors
nextCells[(x, y)] = ALIVE
else:
# Everything else dies or sta
nextCells[(x, y)] = DEAD

try:
time.sleep(1)  # Add a 1 second pause
except KeyboardInterrupt:
print("Conway's Game of Life")
print('By Al Sweigart al@inventwithpy
sys.exit()  # When Ctrl-C is pressed,

